function [ signal_filt , time_co,signal_adj ] = ecg_filter(signal,time,Fs,filepath,s3)

%% PreProcessing Data
 
% ########################################################################
% data adjustment
% ########################################################################

% Scale the signal per the specifications of the sensor
% signal_adj = ((((signal./((2.^10)-1))-0.5) .* 3.3)./ 1100) .* 1000;

signal_adj = ((((signal./(2.^10))-0.5) .* 3.3)./ 1100) .* 1000;

% ########################################################################
% detrend
% ########################################################################

signal_dt = detrend(signal_adj);

% ########################################################################
% fft
% ########################################################################

L = length(time);
n = 2^nextpow2(L);
% Convert the Signal to the frequency domain.
Y = fft(signal_dt,n);
% Define the frequency domain and plot the unique frequencies.
f = Fs*(0:(n/2))/n;
P = abs(Y/n);

% plot frequency domain representation Y

figure;
plot(f,P(1:n/2+1)) 
title('ECG in Frequency Domain')
xlabel('Frequency (f)')
ylabel('|P(f)|')

savefig([filepath filesep 'ECG in Frequency Domain']);
saveas(gcf, [filepath filesep 'ECG in Frequency Domain'], 'png');

% ########################################################################
% filtering
% ########################################################################

% Nyquist frequency
Fn = Fs/2;

% create 50 Hz filter to counter the line interference

f0 = 50;                % notch frequency

freqRatio = f0/Fn;      % ratio of notch freq. to Nyquist freq.

notchWidth = 0.1;       % width of the notch

% Compute zeros
notchZeros = [exp( sqrt(-1)*pi*freqRatio ), exp( -sqrt(-1)*pi*freqRatio )];

% Compute poles
notchPoles = (1-notchWidth) * notchZeros;
% 
% figure;
% zplane(notchZeros.', notchPoles.');

b = poly( notchZeros ); % Get moving average filter coefficients
a = poly( notchPoles ); % Get autoregressive filter coefficients
% 
% figure;
% freqz(b,a,32000,Fs)

% apply notch filter
% signal_dt=hp1Hz(signal_dt);
signal_notch = filter(b,a,signal_dt);

% % signal_notch = notch50Hz(signal_dt);
% % create bandpass filter
% [b, a] = butter(4, [5 20]/Fn, 'bandpass');
% % fvtool(b,a);
% 
% % apply bandpass filter
% signal_filt = filtfilt(b, a,signal_notch);

Wp =  [1.5  20]/Fn;                             % Passband (Normalised)
Ws =  [0.5  45]/Fn;                             % Stopband (Normalised)
Rp =  1;                                        % Passband Ripple (dB)
Rs = 50;                                        % Stopband Ripple (dB)
[n,Wn] = buttord(Wp, Ws, Rp, Rs);               % Filter Order
[b,a]  = butter(n,Wn);                          % Transfer Function
[sos,g] = tf2sos(b,a);                          % Convert To Second-Order-Section For Stability

signal_filt = filtfilt(sos, g, signal_notch);   % Filter Signal

%plot filtered signal

% ########################################################################
% cutoff
% ########################################################################

% calculate number of samples to remove
ct = 10;
cSamples = ct*Fs;
% remove cSamples from both ends
signal_co = signal_filt(cSamples:(end-cSamples));
time_co = time(cSamples:(end-cSamples));

% plot adjusted and cut signal

figure;
hold on;
plot(time_co,signal_co);
title 'ECG filtered';
xlabel 'time [s]';
ylabel 'voltage [mV] ';
hold off;

savefig([filepath filesep 'ECG filtered']);
saveas(gcf, [filepath filesep 'ECG filtered'], 'png');

end

